{"version":3,"sources":["components/instagram/InstaFeedItem.js","components/instagram/InstaFeedList.js","components/twitter/TwitterFeedItem.js","components/twitter/TwitterFeedList.js","components/youtube/YoutubeItem.js","components/youtube/YoutubeList.js","App.js","serviceWorker.js","index.js"],"names":["InstaFeedItem","nextProps","nextState","this","props","data","owner","title","date","link","img","video","alt","like","className","href","src","playsInline","autoPlay","Component","masonryOptions","transitionDuration","imagesLoadedOptions","background","InstaFeedList","state","loading","instaDatas","getData","a","setState","axios","get","response","console","error","prevProps","prevState","elementType","options","map","d","key","id","TwitterFeedItem","profile","retweet","TwitterFeedList","tiwitterDatas","YoutubeItem","description","thumbnail","videoId","YoutubeList","youtubeDatas","items","position","snippet","channelTitle","thumbnails","standard","url","resourceId","App","exact","to","activeClassName","path","component","Instagram","Twitter","Youtube","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b1401a8c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass InstaFeedItem extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.props.data !== nextProps.data) {\r\n\t\t\treturn true;\r\n\t\t} else return false;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { owner, title, date, link, img, video, alt, like } = this.props.data;\r\n\t\treturn (\r\n\t\t\t<div className='myfeedItem'>\r\n\t\t\t\t<a href={link}>\r\n\t\t\t\t\t<div className='myfeedTop'>\r\n\t\t\t\t\t\t<p className='myfeedOwner'>{owner}</p>\r\n\t\t\t\t\t\t<p className='myfeedDate'>{date}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='myfeedCont'>\r\n\t\t\t\t\t\t\t<span className='myfeedMedia'>\r\n\t\t\t\t\t\t\t\t{!img == \"\" && <img src={img} alt={alt} />}\r\n\t\t\t\t\t\t\t\t{!video == \"\" && <video src={video} title={alt} playsInline autoPlay />}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<p className='myfeedLike'>좋아요 {like} 개</p>\r\n\t\t\t\t\t\t<p className='myfeedTitle'>{title}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default InstaFeedItem;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Masonry from 'react-masonry-component';\r\nimport InstaFeedItem from \"./InstaFeedItem\";\r\n\r\nconst masonryOptions = {\r\n\ttransitionDuration: 0\r\n};\r\n \r\nconst imagesLoadedOptions = { background: '.my-bg-image-el' }\r\n\r\nclass InstaFeedList extends Component {\r\n\tstate = {\r\n\t\tloading: false,\r\n\t\tinstaDatas: null,\r\n\t};\r\n\r\n\tgetData = async () => {\r\n\t\ttry {\r\n\t\t\tthis.setState({\r\n\t\t\t\tloading: true,\r\n\t\t\t});\r\n\r\n\t\t\tconst response = await axios.get('https://yo-onhye.github.io/00.temp/json/InstagramDatas.json');\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tinstaDatas: response.data,\r\n\t\t\t});\r\n\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tloading: false,\r\n\t\t});\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getData();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (\r\n\t\t\tthis.props.instaDatas !== prevProps.instaDatas\r\n\t\t) {\r\n\t\t\tthis.getData();\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { instaDatas, loading } = this.state;\r\n\t\treturn (\r\n\t\t\t<section className=\"projectSection\">\r\n\t\t\t\t<div className=\"sectionTitle\">\r\n\t\t\t\t\t<h2>Instargram</h2>\r\n\t\t\t\t</div>\r\n\t\t\t\t{loading && <h3 className=\"myfeedInfotxt\">데이터 로딩 중 입니다:D</h3>}\r\n\t\t\t\t<Masonry\r\n\t\t\t\t\t\tclassName={'myfeedList'}\r\n\t\t\t\t\t\telementType={'ul'}\r\n\t\t\t\t\t\toptions={masonryOptions}\r\n\t\t\t\t\t\timagesLoadedOptions={imagesLoadedOptions}\r\n\t\t\t\t>\r\n\t\t\t\t\t{!loading &&\r\n\t\t\t\t\t\tinstaDatas &&\r\n\t\t\t\t\t\t!instaDatas.error &&\r\n\t\t\t\t\t\tinstaDatas.data.map(d => <li><InstaFeedItem key={d.id} data={d} /></li>)}\r\n\t\t\t\t</Masonry>\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default InstaFeedList;","import React, { Component } from \"react\";\r\n\r\nclass TwitterFeedItem extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.props.data !== nextProps.data) {\r\n\t\t\treturn true;\r\n\t\t} else return false;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { owner, title, profile, date, link, img, alt, like, retweet } = this.props.data;\r\n\t\treturn (\r\n\t\t\t<div className='myfeedItem'>\r\n\t\t\t\t<a href={link}>\r\n\t\t\t\t\t<div className='myfeedTop'>\r\n\t\t\t\t\t\t<span className=\"myfeedProfile\"><img src={profile} alt=\"\" /></span>\r\n\t\t\t\t\t\t<p className='myfeedOwner'>{owner}</p>\r\n\t\t\t\t\t\t<p className='myfeedDate'>{date}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='myfeedCont'>\r\n\t\t\t\t\t\t<p className='myfeedTitle'>{title}</p>\r\n\t\t\t\t\t\t\t<span className='myfeedMedia'>\r\n\t\t\t\t\t\t\t\t<img src={img} alt={alt} />\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<div className=\"myfeedCount\">\r\n\t\t\t\t\t\t\t<span className=\"myfeedCountCell\">좋아요 {like}</span>\r\n\t\t\t\t\t\t\t<span className=\"myfeedCountCell\">리트윗 {retweet}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TwitterFeedItem;\r\n","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\nimport Masonry from 'react-masonry-component';\r\nimport TwitterFeedItem from \"./TwitterFeedItem\";\r\n\r\nconst masonryOptions = {\r\n\ttransitionDuration: 0\r\n};\r\n \r\nconst imagesLoadedOptions = { background: '.my-bg-image-el' }\r\n\r\nclass TwitterFeedList extends Component {\r\n\tstate = {\r\n\t\tloading: false,\r\n\t\ttiwitterDatas: null,\r\n\t};\r\n\r\n\tgetData = async () => {\r\n\t\ttry {\r\n\t\t\tthis.setState({\r\n\t\t\t\tloading: true,\r\n\t\t\t});\r\n\r\n\t\t\tconst response = await axios.get('https://yo-onhye.github.io/00.temp/json/TwitterDatas.json');\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\ttiwitterDatas: response.data,\r\n\t\t\t});\r\n\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tloading: false,\r\n\t\t});\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getData();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (\r\n\t\t\tthis.props.tiwitterDatas !== prevProps.tiwitterDatas\r\n\t\t) {\r\n\t\t\tthis.getData();\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { tiwitterDatas, loading } = this.state;\r\n\t\treturn (\r\n\t\t\t<section className='projectSection'>\r\n\t\t\t\t<div className='sectionTitle'>\r\n\t\t\t\t\t<h2>Twitter</h2>\r\n\t\t\t\t</div>\r\n\t\t\t\t{loading && <h3 className=\"myfeedInfotxt\">데이터 로딩 중 입니다:D</h3>}\r\n\t\t\t\t<Masonry\r\n\t\t\t\t\t\tclassName={'myfeedList'}\r\n\t\t\t\t\t\telementType={'ul'}\r\n\t\t\t\t\t\toptions={masonryOptions}\r\n\t\t\t\t\t\timagesLoadedOptions={imagesLoadedOptions}\r\n\t\t\t\t>\r\n\t\t\t\t\t{!loading &&\r\n\t\t\t\t\ttiwitterDatas &&\r\n\t\t\t\t\t!tiwitterDatas.error &&\r\n\t\t\t\t\ttiwitterDatas.data.map(d => <li><TwitterFeedItem key={d.id} data={d} /></li>)}\r\n\t\t\t\t</Masonry>\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TwitterFeedList;\r\n","import React, { Component } from 'react';\r\nimport './YoutubeItem.css';\r\n\r\nclass YoutubeItem extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.props !== nextProps) {\r\n\t\t\treturn true;\r\n\t\t} else return false;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { owner, title, description, thumbnail, videoId } = this.props;\r\n\t\tconst profile = \"https://yt3.ggpht.com/a/AATXAJwozH_Of4LYYnDnKGO-f2Z3wvq_v8SSakh20Y598g=s176-c-k-c0x00ffffff-no-rj-mo\";\r\n\t\treturn (\r\n\t\t\t<div className=\"myYoutubeItem\">\r\n\t\t\t\t<a href={`https://www.youtube.com/watch?v=${videoId}`}>\r\n\t\t\t\t\t<div className='myYoutubeTop'>\r\n\t\t\t\t\t\t<span className=\"myYoutubeProfile\"><img src={profile} alt=\"\" /></span>\r\n\t\t\t\t\t\t<p className='myYoutubeOwner'>{owner}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='myYoutubeCont'>\r\n\t\t\t\t\t\t<div className='myYoutubeMedia'>\r\n\t\t\t\t\t\t\t{!thumbnail == \"\" && <img src={thumbnail} alt=\"\" />}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p className='myYoutubeTitle'>{title}</p>\r\n\t\t\t\t\t\t<p className='myYoutubeDetail'>{description}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default YoutubeItem;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Masonry from 'react-masonry-component';\r\nimport YoutubeItem from \"./YoutubeItem\";\r\nimport \"./YoutubeList.css\";\r\n\r\nconst masonryOptions = {\r\n\ttransitionDuration: 0\r\n};\r\n \r\nconst imagesLoadedOptions = { background: '.my-bg-image-el' }\r\n\r\nclass YoutubeList extends Component {\r\n\tstate = {\r\n\t\tloading: false,\r\n\t\tyoutubeDatas: null,\r\n\t};\r\n\r\n\tgetData = async () => {\r\n\t\ttry {\r\n\t\t\tthis.setState({\r\n\t\t\t\tloading: true,\r\n\t\t\t});\r\n\r\n\t\t\tconst response = await axios.get(\"https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=PLb1jnpdlalE3wHJku6YPk90Q-U5p1_fxZ&maxResults=50&key=AIzaSyC3dYrIaoJUiV8HSSeJvje5ZPOB0zQPVLs\");\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tyoutubeDatas: response.data.items,\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tloading: false,\r\n\t\t});\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getData();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif (this.props.youtubeDatas !== prevProps.youtubeDatas) {\r\n\t\t\tthis.getData();\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { youtubeDatas, loading } = this.state;\r\n\t\treturn (\r\n\t\t\t<section className='projectSection'>\r\n\t\t\t\t<div className='sectionTitle'>\r\n\t\t\t\t\t<h2>Youtube</h2>\r\n\t\t\t\t</div>\r\n\t\t\t\t{loading && <h3 className='myfeedInfotxt'>데이터 로딩 중 입니다:D</h3>}\r\n\t\t\t\t<Masonry\r\n\t\t\t\t\t\tclassName={'myYoutubeList'}\r\n\t\t\t\t\t\telementType={'ul'}\r\n\t\t\t\t\t\toptions={masonryOptions}\r\n\t\t\t\t\t\timagesLoadedOptions={imagesLoadedOptions}\r\n\t\t\t\t>\r\n\t\t\t\t\t{!loading &&\r\n\t\t\t\t\t\tyoutubeDatas &&\r\n\t\t\t\t\t\t!youtubeDatas.error &&\r\n\t\t\t\t\t\tyoutubeDatas.map((d) => (\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t<YoutubeItem key={d.position} owner={d.snippet.channelTitle} title={d.snippet.title} description={d.snippet.description} thumbnail={d.snippet.thumbnails.standard.url} videoId={d.snippet.resourceId.videoId} />\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t</Masonry>\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default YoutubeList;\r\n","import React, { Component } from \"react\";\nimport { Route, NavLink, Switch } from \"react-router-dom\";\nimport Instagram from \"./components/instagram\";\nimport Twitter from \"./components/twitter\";\nimport Youtube from \"./components/youtube\";\nimport \"./App.css\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='projectMain'>\n\t\t\t\t<div className=\"projcetLogo\">\n\t\t\t\t\t<h1>Rowoon<span>.</span></h1>\n\t\t\t\t</div>\n\t\t\t\t<ul className='projcetNav'>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink exact to='/06.project-collect-sns/instagram' activeClassName=\"active\">\n\t\t\t\t\t\t\t<span>#</span> Instagram\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink to='/06.project-collect-sns/twitter' activeClassName=\"active\">\n\t\t\t\t\t\t\t<span>#</span> Twitter\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink to='/06.project-collect-sns/youtube' activeClassName=\"active\">\n\t\t\t\t\t\t\t<span>#</span> Youtube\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/06.project-collect-sns' component={Instagram} />\n\t\t\t\t\t<Route path='/06.project-collect-sns/instagram' component={Instagram} />\n\t\t\t\t\t<Route path='/06.project-collect-sns/twitter' component={Twitter} />\n\t\t\t\t\t<Route path='/06.project-collect-sns/youtube' component={Youtube} />\n\t\t\t\t\t<Route render={() => <div className=\"projectError\">404 NOT FOUND :(</div>} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}